import{_ as a,c as n,o as i,ag as l}from"./chunks/framework.ZWmXjvV8.js";const o=JSON.parse('{"title":"Cursor AI 规则","description":"","frontmatter":{},"headers":[],"relativePath":"ai/cursor/rules-for-ai.md","filePath":"ai/cursor/rules-for-ai.md","lastUpdated":1741511462000}'),e={name:"ai/cursor/rules-for-ai.md"};function p(r,s,t,h,k,d){return i(),n("div",null,s[0]||(s[0]=[l(`<h1 id="cursor-ai-规则" tabindex="-1">Cursor AI 规则 <a class="header-anchor" href="#cursor-ai-规则" aria-label="Permalink to &quot;Cursor AI 规则&quot;">​</a></h1><blockquote><p><strong>免责声明</strong>：本文档是关于 <a href="https://docs.cursor.com/context/rules-for-ai" target="_blank" rel="noopener noreferrer">Cursor AI 规则功能</a>的<strong>第三方非官方中文文档</strong>，仅供学习参考。内容可能不完全反映最新的官方信息，请以 <a href="https://docs.cursor.com" target="_blank" rel="noopener noreferrer">Cursor 官方文档</a> 为准。所有商标和版权归 Cursor/Anysphere 公司所有。</p></blockquote><blockquote><p>本文档详细介绍如何在 Cursor 中设置与自定义 AI 规则，以便更好地控制和引导 AI 的行为与输出风格。</p></blockquote><hr><h2 id="什么是-ai-规则" tabindex="-1">什么是 AI 规则？ <a class="header-anchor" href="#什么是-ai-规则" aria-label="Permalink to &quot;什么是 AI 规则？&quot;">​</a></h2><p>AI 规则是一组指令和偏好设置，告诉 Cursor 的 AI 如何响应您的查询和请求。通过设置这些规则，您可以指导 AI 以特定的风格、格式或方法来回答问题或生成代码，使其输出更加符合您的期望和项目需求。</p><p>AI 规则实际上可以被视为对底层大语言模型(LLM)的指令或系统提示，它定义了 AI 的&quot;个性&quot;和行为方式。</p><h2 id="为什么-ai-规则很重要" tabindex="-1">为什么 AI 规则很重要？ <a class="header-anchor" href="#为什么-ai-规则很重要" aria-label="Permalink to &quot;为什么 AI 规则很重要？&quot;">​</a></h2><ol><li><strong>项目上下文理解</strong>：为 AI 提供关于项目结构、技术栈和特定需求的关键信息</li><li><strong>自适应行为</strong>：根据 AI 的表现调整其响应方式，让您能够随时间推移微调其行为</li><li><strong>错误纠正</strong>：明确澄清误解并引导 AI 避免常见错误，提高其建议和代码生成的准确性</li><li><strong>一致性保证</strong>：确保团队中所有成员获得风格一致的代码建议和回答</li><li><strong>学习曲线降低</strong>：通过规则帮助新团队成员快速适应项目标准和最佳实践</li></ol><h2 id="cursor-中的-ai-规则类型" tabindex="-1">Cursor 中的 AI 规则类型 <a class="header-anchor" href="#cursor-中的-ai-规则类型" aria-label="Permalink to &quot;Cursor 中的 AI 规则类型&quot;">​</a></h2><p>Cursor 提供了三种主要的 AI 规则配置方式：</p><h3 id="_1-全局规则设置" tabindex="-1">1. 全局规则设置 <a class="header-anchor" href="#_1-全局规则设置" aria-label="Permalink to &quot;1. 全局规则设置&quot;">​</a></h3><p>全局 AI 规则适用于您与 Cursor AI 的所有交互：</p><ol><li>打开 Cursor 设置（⌘ + , 或 Ctrl + ,）</li><li>导航至 &quot;AI&quot; 或 &quot;AI 设置&quot; 部分下的 &quot;General&quot; &gt; &quot;Rules for AI&quot;</li><li>在提供的文本区域中输入您的自定义规则</li><li>点击&quot;保存&quot;应用您的全局规则</li><li>确保启用&quot;包含项目规则文件&quot;选项以应用项目特定的规则</li></ol><p><img src="https://docs.cursor.com/assets/global-rules-example.png" alt="全局规则设置示例"></p><h4 id="全局规则设置示例" tabindex="-1">全局规则设置示例 <a class="header-anchor" href="#全局规则设置示例" aria-label="Permalink to &quot;全局规则设置示例&quot;">​</a></h4><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 错误修复:</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在提供修复建议前彻底分析问题</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 提供精确、有针对性的解决方案</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 解释错误的根本原因</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 保持简洁:</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 优先考虑代码的可读性和可维护性</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 避免过度工程化解决方案</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 尽可能使用标准库和设计模式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 代码更改:</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在进行更改前提出清晰的计划</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 一次性应用对单个文件的所有修改</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 不要修改不相关的文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">4.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 语言偏好:</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 用中文回答我的问题</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 代码中的注释使用中文</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 变量名和函数名使用英文</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">请始终考虑每个项目的具体上下文和特定需求。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="_2-项目特定规则-推荐方法" tabindex="-1">2. 项目特定规则 (推荐方法) <a class="header-anchor" href="#_2-项目特定规则-推荐方法" aria-label="Permalink to &quot;2. 项目特定规则 (推荐方法)&quot;">​</a></h3><p>Cursor 现在推荐使用 <code>.cursor/rules</code> 目录来存储项目特定的 AI 规则。这种新系统提供了更强大、更灵活的路径特定配置能力，对项目的不同部分提供精细控制。</p><h4 id="设置步骤" tabindex="-1">设置步骤 <a class="header-anchor" href="#设置步骤" aria-label="Permalink to &quot;设置步骤&quot;">​</a></h4><ol><li>在项目根目录创建 <code>.cursor</code> 文件夹（如果尚不存在）</li><li>在 <code>.cursor</code> 文件夹内创建 <code>rules</code> 子目录</li><li>在 <code>rules</code> 目录中创建规则文件（通常使用 MDC 格式 - Markdown Component）</li></ol><h4 id="项目规则核心功能" tabindex="-1">项目规则核心功能 <a class="header-anchor" href="#项目规则核心功能" aria-label="Permalink to &quot;项目规则核心功能&quot;">​</a></h4><ul><li><strong>语义描述</strong>：每个规则可以包含何时应用该规则的描述</li><li><strong>文件模式匹配</strong>：使用 glob 模式指定规则适用的文件/文件夹</li><li><strong>自动附加</strong>：当引用匹配的文件时，规则会自动包含</li><li><strong>引用文件</strong>：使用 <code>@file</code> 在规则中引用其他文件，当规则应用时这些文件会作为上下文包含</li></ul><h4 id="创建新规则" tabindex="-1">创建新规则 <a class="header-anchor" href="#创建新规则" aria-label="Permalink to &quot;创建新规则&quot;">​</a></h4><p>您可以通过命令面板轻松创建新规则：</p><ol><li>按下 <code>Cmd + Shift + P</code> (Mac) 或 <code>Ctrl + Shift + P</code> (Windows/Linux)</li><li>选择 <code>New Cursor Rule</code></li></ol><h4 id="目录结构示例" tabindex="-1">目录结构示例 <a class="header-anchor" href="#目录结构示例" aria-label="Permalink to &quot;目录结构示例&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>项目根目录/</span></span>
<span class="line"><span>├── .cursor/</span></span>
<span class="line"><span>│   └── rules/</span></span>
<span class="line"><span>│       ├── general-coding-style.md</span></span>
<span class="line"><span>│       ├── react-components.md</span></span>
<span class="line"><span>│       ├── typescript-rules.md</span></span>
<span class="line"><span>│       └── api-endpoints.md</span></span>
<span class="line"><span>└── ...其他项目文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="mdc-格式规则文件示例" tabindex="-1">MDC 格式规则文件示例 <a class="header-anchor" href="#mdc-格式规则文件示例" aria-label="Permalink to &quot;MDC 格式规则文件示例&quot;">​</a></h4><h5 id="文件-cursor-rules-general-coding-style-md" tabindex="-1">文件：.cursor/rules/general-coding-style.md <a class="header-anchor" href="#文件-cursor-rules-general-coding-style-md" aria-label="Permalink to &quot;文件：.cursor/rules/general-coding-style.md&quot;">​</a></h5><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 通用编码风格</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">应用于：所有源代码文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 指南</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用2个空格进行缩进</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 每行代码不超过80个字符</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用分号结束语句</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用单引号而非双引号作为字符串</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 函数和方法应该包含JSDoc风格注释</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 代码组织</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 相关函数应当分组在一起</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 按逻辑相关性组织代码，而非严格的字母顺序</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 导入语句按以下顺序组织：标准库、第三方库、本地模块</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="文件-cursor-rules-react-components-md" tabindex="-1">文件：.cursor/rules/react-components.md <a class="header-anchor" href="#文件-cursor-rules-react-components-md" aria-label="Permalink to &quot;文件：.cursor/rules/react-components.md&quot;">​</a></h5><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># React 组件规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">应用于：*</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.tsx, *</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.jsx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 组件结构</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用函数组件和Hooks，避免使用类组件</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 每个组件应当有一个清晰的责任</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 将大型组件拆分为多个小型组件</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用React.memo()优化渲染性能</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Props应该使用TypeScript接口定义</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 引用示例代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file src/components/Button.tsx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file src/components/Card.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 测试要求</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 所有组件必须有单元测试</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 测试文件应与组件文件放在同一目录下</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="基于路径的规则示例" tabindex="-1">基于路径的规则示例 <a class="header-anchor" href="#基于路径的规则示例" aria-label="Permalink to &quot;基于路径的规则示例&quot;">​</a></h4><p>您可以为特定文件模式创建规则：</p><h5 id="文件-cursor-rules-api-files-md" tabindex="-1">文件：.cursor/rules/api-files.md <a class="header-anchor" href="#文件-cursor-rules-api-files-md" aria-label="Permalink to &quot;文件：.cursor/rules/api-files.md&quot;">​</a></h5><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># API 端点规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">规则应用：src/api/*</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 所有API请求函数必须有错误处理</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用try/catch包装所有异步调用</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 请求URL应使用环境变量而非硬编码</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 添加请求超时处理</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 实现请求重试逻辑</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="规则链接和组合" tabindex="-1">规则链接和组合 <a class="header-anchor" href="#规则链接和组合" aria-label="Permalink to &quot;规则链接和组合&quot;">​</a></h4><p>您可以在规则文件中使用 <code>@file</code> 引用其他规则文件，实现规则的组合和继承：</p><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 前端项目主规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file .cursor/rules/typescript-base.md</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file .cursor/rules/react-components.md</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file .cursor/rules/styling-guidelines.md</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 项目特定补充规则</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用项目特定的组件库</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 遵循设计系统规范</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 实现特定的错误处理流程</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_3-会话级规则" tabindex="-1">3. 会话级规则 <a class="header-anchor" href="#_3-会话级规则" aria-label="Permalink to &quot;3. 会话级规则&quot;">​</a></h3><p>在单个对话或会话中，您可以临时设定规则：</p><ol><li>在 Ask 或 Agent 对话开始时，明确声明规则</li><li>例如：&quot;请在接下来的对话中，生成的所有代码都应当包含详细注释，并遵循 PEP 8 风格指南&quot;</li></ol><h4 id="会话级规则示例" tabindex="-1">会话级规则示例 <a class="header-anchor" href="#会话级规则示例" aria-label="Permalink to &quot;会话级规则示例&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>在本次会话中，请遵循以下规则：</span></span>
<span class="line"><span>1. 所有生成的 JavaScript 代码应使用 ES6+ 特性</span></span>
<span class="line"><span>2. 函数应该尽可能是纯函数</span></span>
<span class="line"><span>3. 使用 camelCase 命名变量和函数</span></span>
<span class="line"><span>4. 每个函数前都应有 JSDoc 风格的注释</span></span>
<span class="line"><span>5. 错误处理应使用 try/catch 而不是回调</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="高级规则配置示例" tabindex="-1">高级规则配置示例 <a class="header-anchor" href="#高级规则配置示例" aria-label="Permalink to &quot;高级规则配置示例&quot;">​</a></h2><h3 id="框架特定规则示例" tabindex="-1">框架特定规则示例 <a class="header-anchor" href="#框架特定规则示例" aria-label="Permalink to &quot;框架特定规则示例&quot;">​</a></h3><p>以下是一些针对特定框架或文件类型的规则示例：</p><h4 id="solidjs-规则-cursor-rules-solidjs-md" tabindex="-1">SolidJS 规则 (.cursor/rules/solidjs.md) <a class="header-anchor" href="#solidjs-规则-cursor-rules-solidjs-md" aria-label="Permalink to &quot;SolidJS 规则 (.cursor/rules/solidjs.md)&quot;">​</a></h4><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># SolidJS 开发规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">应用于: *</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 组件风格</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用函数组件和 createSignal/createEffect 代替类组件</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 遵循 SolidJS 的响应式原则</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 避免不必要的组件嵌套</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 最佳实践</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 createResource 处理异步数据</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在顶层使用 createSignal/createStore，避免深层嵌套</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 利用 Solid 的细粒度渲染优化性能</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 参考示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file src/components/ExampleSolidComponent.tsx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="自动生成文件处理-cursor-rules-protobuf-md" tabindex="-1">自动生成文件处理 (.cursor/rules/protobuf.md) <a class="header-anchor" href="#自动生成文件处理-cursor-rules-protobuf-md" aria-label="Permalink to &quot;自动生成文件处理 (.cursor/rules/protobuf.md)&quot;">​</a></h4><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># Protobuf 文件处理规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">应用于: *</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.proto, *</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/generated/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 注意事项</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 这些文件是自动生成的，不应直接修改</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 所有更改应该在原始 .proto 文件中进行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 处理方式</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 生成的代码应视为只读</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用包装类扩展功能，而不是修改生成的代码</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在导入这些文件时使用类型断言</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 参考文档</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file docs/protobuf-usage.md</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="特定领域规则示例" tabindex="-1">特定领域规则示例 <a class="header-anchor" href="#特定领域规则示例" aria-label="Permalink to &quot;特定领域规则示例&quot;">​</a></h3><h4 id="ui-组件规则-cursor-rules-ui-components-md" tabindex="-1">UI 组件规则 (.cursor/rules/ui-components.md) <a class="header-anchor" href="#ui-组件规则-cursor-rules-ui-components-md" aria-label="Permalink to &quot;UI 组件规则 (.cursor/rules/ui-components.md)&quot;">​</a></h4><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># UI 组件开发规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">应用于: src/components/ui/*</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 设计原则</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 遵循设计系统规范</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 组件应当是可组合的</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 props 控制外观变化，而非内部状态</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 辅助工具</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 Storybook 开发和测试组件</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 为每个组件编写测试用例</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用主题变量而非硬编码样式值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 文档要求</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 每个组件需要有 JSDoc 注释</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 包含使用示例</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 记录所有 props 及其默认值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file src/components/ui/Button.tsx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file src/components/ui/styles/theme.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="架构规则-cursor-rules-architecture-md" tabindex="-1">架构规则 (.cursor/rules/architecture.md) <a class="header-anchor" href="#架构规则-cursor-rules-architecture-md" aria-label="Permalink to &quot;架构规则 (.cursor/rules/architecture.md)&quot;">​</a></h4><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 架构规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">应用于: src/*</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 分层架构</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 遵循清晰的分层架构：UI -&gt; 应用服务 -&gt; 领域服务 -&gt; 基础设施</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 遵循依赖倒置原则</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 领域层不应依赖外部库和框架</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 模块化</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 每个功能模块应该自包含</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用明确定义的接口进行模块间通信</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 避免循环依赖</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">## 代码组织</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 按照功能而非技术类型组织代码</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 相关功能应该位于同一目录</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用桶（barrel）文件导出公共API</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file src/core/architecture.diagram.md</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="规则编写最佳实践" tabindex="-1">规则编写最佳实践 <a class="header-anchor" href="#规则编写最佳实践" aria-label="Permalink to &quot;规则编写最佳实践&quot;">​</a></h2><p>编写有效的 AI 规则时，请考虑以下最佳实践：</p><h3 id="_1-保持一致性" tabindex="-1">1. 保持一致性 <a class="header-anchor" href="#_1-保持一致性" aria-label="Permalink to &quot;1. 保持一致性&quot;">​</a></h3><p>确保您的规则之间不互相矛盾。相互冲突的指示会使 AI 无法确定应该遵循哪条规则，从而可能导致不一致的结果。</p><h3 id="_2-涵盖多个方面" tabindex="-1">2. 涵盖多个方面 <a class="header-anchor" href="#_2-涵盖多个方面" aria-label="Permalink to &quot;2. 涵盖多个方面&quot;">​</a></h3><p>全面的规则应该涉及编码风格、文档、错误处理、性能考量等多个方面，以确保 AI 在各种情况下都能提供符合预期的输出。</p><h3 id="_3-包含项目特定上下文" tabindex="-1">3. 包含项目特定上下文 <a class="header-anchor" href="#_3-包含项目特定上下文" aria-label="Permalink to &quot;3. 包含项目特定上下文&quot;">​</a></h3><p>提及重要的项目细节，如主要编程语言、框架或独特的架构决策，帮助 AI 更好地理解项目环境。</p><h3 id="_4-平衡灵活性和严格性" tabindex="-1">4. 平衡灵活性和严格性 <a class="header-anchor" href="#_4-平衡灵活性和严格性" aria-label="Permalink to &quot;4. 平衡灵活性和严格性&quot;">​</a></h3><p>在坚持核心原则的同时，允许 AI 有一定空间提出创新解决方案。过于严格的规则可能会限制 AI 的创造力和有用性。</p><h3 id="_5-使用示例" tabindex="-1">5. 使用示例 <a class="header-anchor" href="#_5-使用示例" aria-label="Permalink to &quot;5. 使用示例&quot;">​</a></h3><p>尽可能提供简短的代码片段来说明您偏好的做法，这比纯文本描述更有效。</p><h3 id="_6-明确具体" tabindex="-1">6. 明确具体 <a class="header-anchor" href="#_6-明确具体" aria-label="Permalink to &quot;6. 明确具体&quot;">​</a></h3><p>使用清晰、具体的指令，避免模糊的表述：</p><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">✅ 好的规则：</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 生成的所有函数必须包含参数类型注释和返回类型</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 每个函数都应当有描述功能、参数和返回值的文档字符串</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">❌ 不太有效的规则：</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 写好代码</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使代码更易读</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_7-设定优先级" tabindex="-1">7. 设定优先级 <a class="header-anchor" href="#_7-设定优先级" aria-label="Permalink to &quot;7. 设定优先级&quot;">​</a></h3><p>当规则可能冲突时，明确指出优先级：</p><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># AI 规则优先级</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 安全性和错误处理优先于性能优化</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 代码简洁性优先于详尽的文档（当空间有限时）</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 遵循项目现有的命名惯例，即使与一般最佳实践不同</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="从-cursorrules-迁移到-cursor-rules-目录" tabindex="-1">从 .cursorrules 迁移到 .cursor/rules 目录 <a class="header-anchor" href="#从-cursorrules-迁移到-cursor-rules-目录" aria-label="Permalink to &quot;从 .cursorrules 迁移到 .cursor/rules 目录&quot;">​</a></h2><p>如果您仍在使用旧的 <code>.cursorrules</code> 文件，请按照以下步骤迁移到新系统：</p><h3 id="迁移步骤" tabindex="-1">迁移步骤 <a class="header-anchor" href="#迁移步骤" aria-label="Permalink to &quot;迁移步骤&quot;">​</a></h3><ol><li>创建 <code>.cursor/rules</code> 目录</li><li>分析您现有的 <code>.cursorrules</code> 文件，按功能领域将其拆分</li><li>为每个功能领域创建单独的规则文件</li><li>添加适当的文件模式匹配</li><li>使用 <code>@file</code> 引用示例文件和相关规则</li><li>在版本控制中弃用旧的 <code>.cursorrules</code> 文件</li></ol><h3 id="迁移示例" tabindex="-1">迁移示例 <a class="header-anchor" href="#迁移示例" aria-label="Permalink to &quot;迁移示例&quot;">​</a></h3><p><strong>旧的 .cursorrules 文件:</strong></p><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">你是一位精通 TypeScript 和 React 的专家。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">代码风格:</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 ESLint 规范</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 Prettier 格式化</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 类型定义使用接口</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">React组件:</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用函数组件</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 React Hooks</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 提取复用逻辑到自定义 Hooks</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>迁移后的结构:</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.cursor/</span></span>
<span class="line"><span>└── rules/</span></span>
<span class="line"><span>    ├── typescript.md  # TypeScript相关规则</span></span>
<span class="line"><span>    ├── react.md       # React组件规则</span></span>
<span class="line"><span>    └── general.md     # 通用编码规则</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>typescript.md:</strong></p><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># TypeScript 规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">应用于: *</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ts, *</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.tsx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 ESLint 规范</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 Prettier 格式化</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 类型定义优先使用接口而非类型别名</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 避免使用 any 类型，优先使用 unknown</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file tsconfig.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file .eslintrc.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>react.md:</strong></p><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># React 组件规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">应用于: *</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.tsx, *</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.jsx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用函数组件而非类组件</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 React Hooks 管理状态和副作用</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 提取复用逻辑到自定义 Hooks</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 组件应遵循单一责任原则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file src/components/ExampleComponent.tsx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@file src/hooks/useCustomHook.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="规则优先级与组合策略" tabindex="-1">规则优先级与组合策略 <a class="header-anchor" href="#规则优先级与组合策略" aria-label="Permalink to &quot;规则优先级与组合策略&quot;">​</a></h2><p>当项目中有多个规则可能适用于同一文件时，Cursor 应用以下优先级策略：</p><ol><li><strong>路径特异性</strong>：更具体的路径匹配具有更高优先级</li><li><strong>显式引用</strong>：通过 <code>@file</code> 显式引用的规则优先于自动匹配的规则</li><li><strong>规则声明顺序</strong>：在相同规则文件中，先声明的指令优先级更高</li><li><strong>项目 vs 全局</strong>：项目规则总是优先于全局规则</li></ol><h2 id="规则的组织与维护" tabindex="-1">规则的组织与维护 <a class="header-anchor" href="#规则的组织与维护" aria-label="Permalink to &quot;规则的组织与维护&quot;">​</a></h2><p>随着项目的发展，定期审查和更新您的 AI 规则很重要：</p><ol><li><p><strong>版本控制</strong>：将 AI 规则纳入版本控制，跟踪其变化</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加规则文件到版本控制</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .cursor/rules/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;更新AI规则：添加新的代码风格指南&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>团队共享</strong>：确保所有团队成员了解并使用统一的 AI 规则</p><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 团队AI规则使用指南</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 安装最新版Cursor</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 确保启用了&quot;包含项目规则文件&quot;设置</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用git pull确保获取最新的规则定义</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">4.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 遇到问题请在团队Slack上讨论</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>定期审查</strong>：随着项目的发展和新模式的出现，更新规则</p><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 规则更新日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2024-06-01: 添加TypeScript严格类型检查规则</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2024-05-15: 更新测试规范，增加集成测试要求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2024-04-22: 添加新的安全规则和最佳实践</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>从反馈中学习</strong>：根据 AI 生成的代码质量，调整和改进规则</p><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 规则改进反馈表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| 日期 | 问题描述 | 规则调整建议 | 状态 |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|------|---------|------------|------|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| 2024-06-05 | AI未正确处理异步操作 | 添加更明确的异步处理指南 | 已实施 |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| 2024-05-20 | 生成的单元测试覆盖不全 | 详细说明测试边缘情况要求 | 审核中 |</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol><h2 id="规则效果验证" tabindex="-1">规则效果验证 <a class="header-anchor" href="#规则效果验证" aria-label="Permalink to &quot;规则效果验证&quot;">​</a></h2><p>创建规则后，可以通过以下方式验证其效果：</p><ol><li><strong>比较测试</strong>：使用相同的提示，对比有规则和无规则时的 AI 响应差异</li><li><strong>团队评审</strong>：让团队成员审查规则并提供反馈</li><li><strong>逐步迭代</strong>：从简单规则开始，观察效果后再添加更复杂的规则</li></ol><h2 id="常见问题与解决方案" tabindex="-1">常见问题与解决方案 <a class="header-anchor" href="#常见问题与解决方案" aria-label="Permalink to &quot;常见问题与解决方案&quot;">​</a></h2><h3 id="q-我的规则似乎没有生效-可能是什么原因" tabindex="-1">Q: 我的规则似乎没有生效，可能是什么原因？ <a class="header-anchor" href="#q-我的规则似乎没有生效-可能是什么原因" aria-label="Permalink to &quot;Q: 我的规则似乎没有生效，可能是什么原因？&quot;">​</a></h3><p>A: 检查以下几点：</p><ul><li>确保规则文件位于正确位置（<code>.cursor/rules/</code> 目录中）</li><li>验证文件格式和语法是否正确</li><li>检查文件模式匹配是否适合您的目标文件</li><li>检查Cursor设置中是否启用了&quot;包含项目规则文件&quot;选项</li><li>尝试重启Cursor编辑器</li></ul><h3 id="q-全局规则和项目规则冲突时-哪个优先" tabindex="-1">Q: 全局规则和项目规则冲突时，哪个优先？ <a class="header-anchor" href="#q-全局规则和项目规则冲突时-哪个优先" aria-label="Permalink to &quot;Q: 全局规则和项目规则冲突时，哪个优先？&quot;">​</a></h3><p>A: 项目特定规则（<code>.cursor/rules/</code> 目录中的文件）优先于全局规则。如果两者有冲突，AI 会优先遵循项目规则。</p><h3 id="q-如何为不同编程语言设置不同规则" tabindex="-1">Q: 如何为不同编程语言设置不同规则？ <a class="header-anchor" href="#q-如何为不同编程语言设置不同规则" aria-label="Permalink to &quot;Q: 如何为不同编程语言设置不同规则？&quot;">​</a></h3><p>A: 在 <code>.cursor/rules/</code> 目录中为每种语言创建单独的规则文件，并使用文件模式匹配指定适用范围：</p><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># Python 编码规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">应用于: *</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 遵循 PEP 8 规范</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 4 空格缩进</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 docstrings 文档化函数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># JavaScript 编码规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">应用于: *</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.js, *</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.jsx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 遵循 Airbnb 风格指南</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 2 空格缩进</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 优先使用 ES6+ 特性</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="q-cursorrules-文件是否仍然有效" tabindex="-1">Q: <code>.cursorrules</code> 文件是否仍然有效？ <a class="header-anchor" href="#q-cursorrules-文件是否仍然有效" aria-label="Permalink to &quot;Q: \`.cursorrules\` 文件是否仍然有效？&quot;">​</a></h3><p>A: 虽然 <code>.cursorrules</code> 文件目前仍然有效，但它被视为旧系统，可能在未来被完全弃用。我们强烈建议迁移到新的 <code>.cursor/rules/</code> 目录系统，以获得更好的灵活性和可维护性。</p><hr><p>通过精心设计和应用 AI 规则，您可以将 Cursor 的 AI 功能塑造成您团队的高效协作伙伴。这些规则不仅提高了 AI 生成的代码质量和一致性，还确保了其输出符合项目的特定需求和标准。</p><p>如有任何问题，请参考<a href="/ai/cursor/faq.html">常见问题解答</a>或访问<a href="https://forum.cursor.com" target="_blank" rel="noopener noreferrer">社区论坛</a>寻求帮助。</p>`,112)]))}const b=a(e,[["render",p]]);export{o as __pageData,b as default};
