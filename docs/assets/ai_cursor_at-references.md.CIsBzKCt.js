import{_ as e,c as s,o as t,ag as i}from"./chunks/framework.CPp4lspA.js";const u=JSON.parse('{"title":"Cursor @ 符号引用详解","description":"","frontmatter":{},"headers":[],"relativePath":"ai/cursor/at-references.md","filePath":"ai/cursor/at-references.md","lastUpdated":1741509101000}'),n={name:"ai/cursor/at-references.md"};function r(l,a,o,d,p,c){return t(),s("div",null,a[0]||(a[0]=[i('<h1 id="cursor-符号引用详解" tabindex="-1">Cursor @ 符号引用详解 <a class="header-anchor" href="#cursor-符号引用详解" aria-label="Permalink to &quot;Cursor @ 符号引用详解&quot;">​</a></h1><blockquote><p><strong>免责声明</strong>：本文档是关于 <a href="https://docs.cursor.com/context/@-symbols/basic" target="_blank" rel="noopener noreferrer">Cursor 官方文档中的 @ 符号引用功能</a>和<a href="https://docs.cursor.com/context/@-symbols/@-files" target="_blank" rel="noopener noreferrer">@文件引用功能</a>的<strong>第三方非官方中文翻译和扩展</strong>，仅供学习参考。内容可能不完全反映最新的官方信息，请以 <a href="https://docs.cursor.com" target="_blank" rel="noopener noreferrer">Cursor 官方文档</a> 为准。所有商标和版权归 Cursor/Anysphere 公司所有。</p></blockquote><blockquote><p>本文档详细介绍了 Cursor 中的 @ 符号引用系统，这是一个强大的上下文管理工具，允许您在与 AI 交互时精确地指定引用内容。</p></blockquote><hr><h2 id="符号引用系统概述" tabindex="-1">@ 符号引用系统概述 <a class="header-anchor" href="#符号引用系统概述" aria-label="Permalink to &quot;@ 符号引用系统概述&quot;">​</a></h2><p>在 Cursor 的各种输入框中（如 Chat、Composer 和 ⌘K），您可以通过输入 <code>@</code> 符号来触发上下文引用功能。这将弹出一个建议菜单，自动显示最相关的上下文选项，帮助您为 AI 提供精确的参考资料。</p><p>@ 符号引用是连接您的查询与代码库、文档和其他资源的桥梁，确保 AI 拥有回答问题所需的确切上下文。</p><h3 id="键盘快捷操作" tabindex="-1">键盘快捷操作 <a class="header-anchor" href="#键盘快捷操作" aria-label="Permalink to &quot;键盘快捷操作&quot;">​</a></h3><ul><li>使用<strong>上/下箭头键</strong>在建议列表中导航</li><li>按<strong>回车键</strong>选择当前高亮的建议</li><li>如果选择的是类别（如&quot;Files&quot;），菜单会进一步筛选显示该类别中最相关的项目</li></ul><h2 id="所有可用的-符号类型" tabindex="-1">所有可用的 @ 符号类型 <a class="header-anchor" href="#所有可用的-符号类型" aria-label="Permalink to &quot;所有可用的 @ 符号类型&quot;">​</a></h2><p>Cursor 提供了丰富的 @ 符号类型，满足不同的上下文需求：</p><table tabindex="0"><thead><tr><th>@ 符号类型</th><th>描述</th><th>使用场景</th></tr></thead><tbody><tr><td>@Files</td><td>引用项目中的特定文件</td><td>当您需要 AI 分析、理解或修改特定文件时</td></tr><tr><td>@Folders</td><td>引用整个文件夹</td><td>提供更广泛的上下文，让 AI 理解项目结构</td></tr><tr><td>@Code</td><td>引用代码库中的特定代码片段或符号</td><td>获取关于特定函数、类或变量的帮助</td></tr><tr><td>@Docs</td><td>访问文档和指南</td><td>引入官方文档或自定义文档作为上下文</td></tr><tr><td>@Git</td><td>访问Git历史和变更</td><td>分析代码变更历史或了解特定提交</td></tr><tr><td>@Notepads</td><td>访问记事本内容</td><td>引用您在Cursor中创建的笔记</td></tr><tr><td>@Summarized Composers</td><td>使用已总结的Composer会话</td><td>引用之前的AI交互结果</td></tr><tr><td>@Cursor Rules</td><td>使用Cursor规则</td><td>引入自定义的AI行为规则</td></tr><tr><td>@Web</td><td>引用外部网络资源和文档</td><td>获取最新信息或外部参考资料</td></tr><tr><td>@Link</td><td>创建指向特定代码或文档的链接</td><td>在回答中提供直接引用</td></tr><tr><td>@Recent Changes</td><td>引用最近的变更</td><td>分析或讨论刚刚进行的代码修改</td></tr><tr><td>@Codebase</td><td>引用整个代码库作为上下文（仅限Chat）</td><td>获取关于整个项目的广泛理解</td></tr><tr><td>@Lint Errors</td><td>引用Lint错误（仅限Chat）</td><td>修复代码中的语法和风格问题</td></tr><tr><td>@Definitions</td><td>查找符号定义（仅限⌘K）</td><td>了解特定符号的定义和用法</td></tr></tbody></table><h3 id="其他特殊符号" tabindex="-1">其他特殊符号 <a class="header-anchor" href="#其他特殊符号" aria-label="Permalink to &quot;其他特殊符号&quot;">​</a></h3><p>除了@符号外，Cursor还支持其他特殊符号：</p><ul><li><strong># Files</strong>：将文件添加到上下文中而不引用它们</li><li><strong>/ Commands</strong>：将打开和活动的文件添加到上下文中</li></ul><h2 id="符号类型详细说明" tabindex="-1">@ 符号类型详细说明 <a class="header-anchor" href="#符号类型详细说明" aria-label="Permalink to &quot;@ 符号类型详细说明&quot;">​</a></h2><p>下面是每种 @ 符号类型的详细介绍：</p><h3 id="files-文件引用" tabindex="-1">@Files - 文件引用 <a class="header-anchor" href="#files-文件引用" aria-label="Permalink to &quot;@Files - 文件引用&quot;">​</a></h3><p><strong>描述</strong>：引用项目中的特定文件</p><p><strong>使用场景</strong>：当您需要 AI 分析、理解或修改特定文件时</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@</code> 后继续输入文件名</li><li>从建议列表中选择您想要引用的文件</li><li>文件将被添加到 AI 的上下文中，使 AI 能够访问该文件的内容</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@main.js 这个文件中的路由配置有什么问题？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="folders-文件夹引用" tabindex="-1">@Folders - 文件夹引用 <a class="header-anchor" href="#folders-文件夹引用" aria-label="Permalink to &quot;@Folders - 文件夹引用&quot;">​</a></h3><p><strong>描述</strong>：引用整个文件夹</p><p><strong>使用场景</strong>：提供更广泛的上下文，让 AI 理解项目结构</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@</code> 后输入文件夹路径</li><li>从建议列表中选择您想要引用的文件夹</li><li>文件夹中的所有文件都将被添加到上下文中，但 AI 会根据查询的相关性对它们进行优先级排序</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@src/components/ 这个目录下的组件遵循了什么设计模式？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="code-代码片段引用" tabindex="-1">@Code - 代码片段引用 <a class="header-anchor" href="#code-代码片段引用" aria-label="Permalink to &quot;@Code - 代码片段引用&quot;">​</a></h3><p><strong>描述</strong>：引用代码库中的特定代码片段或符号</p><p><strong>使用场景</strong>：获取关于特定函数、类或变量的帮助</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@</code> 后开始输入代码元素的名称（如函数名、类名）</li><li>从建议列表中选择匹配的代码元素</li><li>该代码元素及其上下文将被添加到 AI 的参考中</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@authenticateUser 这个函数的安全性如何？有没有潜在的漏洞？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="docs-文档引用" tabindex="-1">@Docs - 文档引用 <a class="header-anchor" href="#docs-文档引用" aria-label="Permalink to &quot;@Docs - 文档引用&quot;">​</a></h3><p><strong>描述</strong>：访问文档和指南</p><p><strong>使用场景</strong>：引入官方文档或自定义文档作为上下文</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@Docs</code> 后可以浏览可用的文档</li><li>选择相关文档或添加新的文档URL</li><li>文档内容将被作为上下文提供给 AI</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Docs React 如何使用React的上下文API来管理全局状态？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="git-git历史引用" tabindex="-1">@Git - Git历史引用 <a class="header-anchor" href="#git-git历史引用" aria-label="Permalink to &quot;@Git - Git历史引用&quot;">​</a></h3><p><strong>描述</strong>：访问Git历史和变更</p><p><strong>使用场景</strong>：分析代码变更历史或了解特定提交</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@Git</code> 后可以浏览仓库的提交历史</li><li>选择特定的提交或变更</li><li>该提交的变更信息将被添加到上下文中</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Git 最近的提交修复了什么问题？这些变更是否合理？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="notepads-笔记本引用" tabindex="-1">@Notepads - 笔记本引用 <a class="header-anchor" href="#notepads-笔记本引用" aria-label="Permalink to &quot;@Notepads - 笔记本引用&quot;">​</a></h3><p><strong>描述</strong>：访问记事本内容</p><p><strong>使用场景</strong>：引用您在Cursor中创建的笔记</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@Notepads</code> 后选择已保存的笔记</li><li>笔记内容将被添加到上下文中</li><li>这对于引用之前记录的想法、计划或临时代码很有用</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Notepads API设计 请根据我的笔记中记录的API设计原则审查这个接口</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="summarized-composers-已汇总的composer会话" tabindex="-1">@Summarized Composers - 已汇总的Composer会话 <a class="header-anchor" href="#summarized-composers-已汇总的composer会话" aria-label="Permalink to &quot;@Summarized Composers - 已汇总的Composer会话&quot;">​</a></h3><p><strong>描述</strong>：使用已总结的Composer会话</p><p><strong>使用场景</strong>：引用之前的AI交互结果</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@Summarized</code> 后选择之前保存的Composer会话</li><li>该会话的摘要将被添加到当前上下文中</li><li>可以帮助AI理解之前的讨论和决策</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Summarized 重构计划 基于之前我们讨论的重构计划，接下来应该优先处理哪部分代码？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="cursor-rules-cursor规则引用" tabindex="-1">@Cursor Rules - Cursor规则引用 <a class="header-anchor" href="#cursor-rules-cursor规则引用" aria-label="Permalink to &quot;@Cursor Rules - Cursor规则引用&quot;">​</a></h3><p><strong>描述</strong>：使用Cursor规则</p><p><strong>使用场景</strong>：引入自定义的AI行为规则</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@Cursor Rules</code> 后选择已定义的规则</li><li>这些规则将指导AI如何响应您的查询</li><li>例如，可以设置代码风格、注释规范或错误处理策略</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Cursor Rules 代码风格 生成一个新的React组件，遵循我们的代码风格规则</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="web-网络资源引用" tabindex="-1">@Web - 网络资源引用 <a class="header-anchor" href="#web-网络资源引用" aria-label="Permalink to &quot;@Web - 网络资源引用&quot;">​</a></h3><p><strong>描述</strong>：引用外部网络资源和文档</p><p><strong>使用场景</strong>：获取最新信息或外部参考资料</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@Web</code> 后输入搜索查询</li><li>AI将搜索网络并将相关结果作为上下文</li><li>这对于获取最新技术信息或API文档特别有用</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Web &quot;React 18 新特性&quot; 如何在我们的项目中利用React 18的新特性？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="link-链接引用" tabindex="-1">@Link - 链接引用 <a class="header-anchor" href="#link-链接引用" aria-label="Permalink to &quot;@Link - 链接引用&quot;">​</a></h3><p><strong>描述</strong>：创建指向特定代码或文档的链接</p><p><strong>使用场景</strong>：在回答中提供直接引用</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@Link</code> 后粘贴URL或选择要链接的资源</li><li>该链接将被格式化并添加到上下文中</li><li>AI可以引用这个链接提供的信息</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Link https://reactjs.org/docs/hooks-reference.html 如何正确使用React Hooks的依赖数组？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="recent-changes-最近变更引用" tabindex="-1">@Recent Changes - 最近变更引用 <a class="header-anchor" href="#recent-changes-最近变更引用" aria-label="Permalink to &quot;@Recent Changes - 最近变更引用&quot;">​</a></h3><p><strong>描述</strong>：引用最近的变更</p><p><strong>使用场景</strong>：分析或讨论刚刚进行的代码修改</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@Recent Changes</code> 后查看最近的文件修改</li><li>选择相关的变更</li><li>这些变更将被添加到上下文中</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Recent Changes 我刚才的修改可能会导致什么潜在问题？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="codebase-代码库引用" tabindex="-1">@Codebase - 代码库引用 <a class="header-anchor" href="#codebase-代码库引用" aria-label="Permalink to &quot;@Codebase - 代码库引用&quot;">​</a></h3><p><strong>描述</strong>：引用整个代码库作为上下文（仅限Chat）</p><p><strong>使用场景</strong>：获取关于整个项目的广泛理解</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@Codebase</code> 将整个代码库添加为上下文</li><li>仅在Chat中可用，因为它可能涉及大量上下文</li><li>AI会尝试理解整个代码库结构和关系</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Codebase 这个项目的整体架构是什么？有哪些关键模块？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="lint-errors-lint错误引用" tabindex="-1">@Lint Errors - Lint错误引用 <a class="header-anchor" href="#lint-errors-lint错误引用" aria-label="Permalink to &quot;@Lint Errors - Lint错误引用&quot;">​</a></h3><p><strong>描述</strong>：引用Lint错误（仅限Chat）</p><p><strong>使用场景</strong>：修复代码中的语法和风格问题</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>@Lint Errors</code> 查看当前文件或项目中的lint错误</li><li>选择要解决的错误</li><li>AI将提供修复这些错误的建议</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Lint Errors 如何一次性修复所有这些lint警告？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="definitions-符号定义引用" tabindex="-1">@Definitions - 符号定义引用 <a class="header-anchor" href="#definitions-符号定义引用" aria-label="Permalink to &quot;@Definitions - 符号定义引用&quot;">​</a></h3><p><strong>描述</strong>：查找符号定义（仅限⌘K）</p><p><strong>使用场景</strong>：了解特定符号的定义和用法</p><p><strong>使用方法</strong>：</p><ul><li>在⌘K命令中输入 <code>@Definitions</code> 后输入要查找的符号名称</li><li>选择匹配的符号</li><li>AI将提供该符号的定义和用法说明</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Definitions UserContext 这个上下文对象的结构是什么？它在哪些组件中被使用？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="files-引用详解" tabindex="-1">@Files 引用详解 <a class="header-anchor" href="#files-引用详解" aria-label="Permalink to &quot;@Files 引用详解&quot;">​</a></h2><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h3><p>在Chat、⌘K或Composer中，您可以通过以下方式引用文件：</p><ol><li>输入<code>@</code>并继续输入文件名或路径</li><li>从弹出的建议列表中选择所需文件</li><li>或在<code>@</code>后直接输入，您将在@Code策略后看到文件搜索结果</li></ol><p>为确保引用的文件正确，Cursor会显示文件路径预览。这在有多个同名文件位于不同文件夹的情况下特别有用。</p><h3 id="文件预览和分块" tabindex="-1">文件预览和分块 <a class="header-anchor" href="#文件预览和分块" aria-label="Permalink to &quot;文件预览和分块&quot;">​</a></h3><p>当您引用文件时，Cursor会提供文件内容预览，帮助您确认这是否是您想要引用的文件。</p><h4 id="长文件处理" tabindex="-1">长文件处理 <a class="header-anchor" href="#长文件处理" aria-label="Permalink to &quot;长文件处理&quot;">​</a></h4><p>在Cursor的Chat中，如果文件内容过长，Cursor会将文件分成更小的块并根据与查询的相关性对它们进行重新排序。这确保了最相关的内容能够优先被处理，同时保持在模型的上下文窗口限制内。</p><p>分块处理的优势：</p><ul><li>优化处理大型文件</li><li>确保最相关内容优先考虑</li><li>在不丢失关键信息的情况下适应模型限制</li></ul><h3 id="拖放支持" tabindex="-1">拖放支持 <a class="header-anchor" href="#拖放支持" aria-label="Permalink to &quot;拖放支持&quot;">​</a></h3><p>您可以直接从主侧边栏拖放文件到Composer、Chat或⌘K中，将它们作为上下文添加。这提供了一种快速、直观的方式来引用多个文件。</p><p>拖放操作步骤：</p><ol><li>在文件浏览器中找到所需文件</li><li>点击并按住该文件</li><li>将其拖动到AI输入框</li><li>释放鼠标按钮完成添加</li></ol><h2 id="高级-引用技巧" tabindex="-1">高级 @ 引用技巧 <a class="header-anchor" href="#高级-引用技巧" aria-label="Permalink to &quot;高级 @ 引用技巧&quot;">​</a></h2><h3 id="组合使用多个-引用" tabindex="-1">组合使用多个 @ 引用 <a class="header-anchor" href="#组合使用多个-引用" aria-label="Permalink to &quot;组合使用多个 @ 引用&quot;">​</a></h3><p>您可以在同一查询中组合使用多个 @ 符号引用，创建复杂而精确的上下文：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@src/api/auth.js @src/components/Login.jsx 这两个文件如何交互？如何改进它们之间的数据流？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用通配符和路径模式" tabindex="-1">使用通配符和路径模式 <a class="header-anchor" href="#使用通配符和路径模式" aria-label="Permalink to &quot;使用通配符和路径模式&quot;">​</a></h3><p>在引用文件或文件夹时，您可以使用通配符和路径模式来匹配多个文件：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@src/utils/*.js 这些工具函数中是否有任何可以合并的重复代码？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="结合-web-和其他上下文" tabindex="-1">结合 @Web 和其他上下文 <a class="header-anchor" href="#结合-web-和其他上下文" aria-label="Permalink to &quot;结合 @Web 和其他上下文&quot;">​</a></h3><p>您可以将@Web与特定文件结合使用，获取更全面的答案：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@src/components/DataGrid.jsx @Web &quot;React data grid best practices&quot; 如何优化这个组件的性能？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用-docs-引用文档" tabindex="-1">使用 @Docs 引用文档 <a class="header-anchor" href="#使用-docs-引用文档" aria-label="Permalink to &quot;使用 @Docs 引用文档&quot;">​</a></h3><p>Cursor预先爬取了一系列第三方文档，可通过<code>@Docs</code>符号访问。您还可以添加自定义文档：</p><ol><li>使用<code>@Docs</code> &gt; <code>Add new doc</code></li><li>粘贴所需文档的URL</li><li>Cursor将索引并学习该文档</li><li>文档索引完成后，您可以像使用任何其他文档一样将其用作上下文</li></ol><h4 id="管理自定义文档" tabindex="-1">管理自定义文档 <a class="header-anchor" href="#管理自定义文档" aria-label="Permalink to &quot;管理自定义文档&quot;">​</a></h4><p>在<code>Cursor设置</code> &gt; <code>功能</code> &gt; <code>文档</code>中，您可以看到已添加的文档。您可以在此编辑、删除或添加新文档。</p><h2 id="其他特殊符号详细说明" tabindex="-1">其他特殊符号详细说明 <a class="header-anchor" href="#其他特殊符号详细说明" aria-label="Permalink to &quot;其他特殊符号详细说明&quot;">​</a></h2><h3 id="files-非引用文件添加" tabindex="-1"># Files - 非引用文件添加 <a class="header-anchor" href="#files-非引用文件添加" aria-label="Permalink to &quot;# Files - 非引用文件添加&quot;">​</a></h3><p><strong>描述</strong>：将文件添加到上下文中而不引用它们</p><p><strong>使用场景</strong>：当您想要提供额外的上下文，但不希望在回答中明确引用这些文件时</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>#</code> 后选择文件</li><li>文件将被添加到上下文，但不会作为明确引用出现在提示中</li><li>这对于提供背景信息而不分散注意力很有用</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#config.json 我们应该如何重构用户认证逻辑？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="commands-活动文件引用" tabindex="-1">/ Commands - 活动文件引用 <a class="header-anchor" href="#commands-活动文件引用" aria-label="Permalink to &quot;/ Commands - 活动文件引用&quot;">​</a></h3><p><strong>描述</strong>：将打开和活动的文件添加到上下文中</p><p><strong>使用场景</strong>：当您想快速引用当前正在编辑的文件或打开的文件时</p><p><strong>使用方法</strong>：</p><ul><li>输入 <code>/</code> 查看可用命令</li><li>选择相关命令来添加活动文件</li><li>这比手动查找文件要快捷得多</li></ul><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/active 这段代码中的错误在哪里？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="使用场景示例" tabindex="-1">使用场景示例 <a class="header-anchor" href="#使用场景示例" aria-label="Permalink to &quot;使用场景示例&quot;">​</a></h2><h3 id="代码理解" tabindex="-1">代码理解 <a class="header-anchor" href="#代码理解" aria-label="Permalink to &quot;代码理解&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@src/components/DataTable.jsx 这个组件的渲染逻辑是什么？性能瓶颈可能在哪里？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="跨文件关系分析" tabindex="-1">跨文件关系分析 <a class="header-anchor" href="#跨文件关系分析" aria-label="Permalink to &quot;跨文件关系分析&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@models/User.js @controllers/UserController.js 这两个文件之间的数据流是什么样的？是否遵循了MVC模式？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="代码审查和优化" tabindex="-1">代码审查和优化 <a class="header-anchor" href="#代码审查和优化" aria-label="Permalink to &quot;代码审查和优化&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@src/utils/helpers.js 这个文件中有什么可以优化的地方？有没有潜在的bug或性能问题？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="学习新项目" tabindex="-1">学习新项目 <a class="header-anchor" href="#学习新项目" aria-label="Permalink to &quot;学习新项目&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@package.json @README.md @main.js 帮我理解这个项目的主要功能和架构</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="批量文件处理" tabindex="-1">批量文件处理 <a class="header-anchor" href="#批量文件处理" aria-label="Permalink to &quot;批量文件处理&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@src/api/*.js 这些API调用是否一致地处理错误？有没有缺少错误处理的地方？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="常见问题与解决方案" tabindex="-1">常见问题与解决方案 <a class="header-anchor" href="#常见问题与解决方案" aria-label="Permalink to &quot;常见问题与解决方案&quot;">​</a></h2><h3 id="为什么有时找不到文件" tabindex="-1">为什么有时找不到文件？ <a class="header-anchor" href="#为什么有时找不到文件" aria-label="Permalink to &quot;为什么有时找不到文件？&quot;">​</a></h3><p>可能原因：</p><ul><li>文件名或路径输入错误</li><li>文件位于被忽略的目录中</li><li>文件尚未保存（新创建的文件）</li></ul><p>解决方案：</p><ul><li>检查文件名和路径拼写</li><li>确认文件不在<code>.cursorignore</code>中排除</li><li>保存新文件后再引用</li></ul><h3 id="符号引用与代码库索引的关系" tabindex="-1">@ 符号引用与代码库索引的关系 <a class="header-anchor" href="#符号引用与代码库索引的关系" aria-label="Permalink to &quot;@ 符号引用与代码库索引的关系&quot;">​</a></h3><p>@ 符号引用功能与代码库索引紧密相关。为获得最佳效果：</p><ul><li>确保您的代码库已正确索引</li><li>定期更新索引以反映新变更</li><li>使用精确的引用来减轻对索引的依赖</li></ul><h3 id="如何处理大型文件" tabindex="-1">如何处理大型文件？ <a class="header-anchor" href="#如何处理大型文件" aria-label="Permalink to &quot;如何处理大型文件？&quot;">​</a></h3><p>当引用非常大的文件时：</p><ul><li>考虑引用文件的特定部分而不是整个文件</li><li>使用更精确的查询以帮助AI识别相关内容</li><li>利用Cursor的自动分块功能来处理大文件</li></ul><hr><p>通过精通 @ 符号引用系统，您可以显著提高与 Cursor AI 的交互效率和准确性。这种能力允许您为AI提供精确的上下文，从而获取更相关、更有用的回答，无论是理解复杂代码库还是实现新功能。</p><p>如有任何问题，请参考<a href="/ai/cursor/faq.html">常见问题解答</a>或访问<a href="https://forum.cursor.com" target="_blank" rel="noopener noreferrer">社区论坛</a>寻求帮助。</p>',186)]))}const b=e(n,[["render",r]]);export{u as __pageData,b as default};
