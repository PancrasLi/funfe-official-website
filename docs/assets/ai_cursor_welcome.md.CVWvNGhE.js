import{_ as a,c as i,o as n,ag as r}from"./chunks/framework.CPp4lspA.js";const d=JSON.parse('{"title":"Cursor 欢迎页面","description":"","frontmatter":{},"headers":[],"relativePath":"ai/cursor/welcome.md","filePath":"ai/cursor/welcome.md","lastUpdated":1741509101000}'),e={name:"ai/cursor/welcome.md"};function l(t,s,p,h,k,o){return n(),i("div",null,s[0]||(s[0]=[r(`<h1 id="cursor-欢迎页面" tabindex="-1">Cursor 欢迎页面 <a class="header-anchor" href="#cursor-欢迎页面" aria-label="Permalink to &quot;Cursor 欢迎页面&quot;">​</a></h1><blockquote><p><strong>免责声明</strong>：本文档是 <a href="https://docs.cursor.com/get-started/welcome" target="_blank" rel="noopener noreferrer">Cursor 官方文档</a>的<strong>第三方非官方中文翻译</strong>，仅供学习参考。内容可能不完全反映最新的官方信息，请以 <a href="https://docs.cursor.com" target="_blank" rel="noopener noreferrer">Cursor 官方文档</a> 为准。所有商标和版权归 Cursor/Anysphere 公司所有。</p></blockquote><blockquote><p>本文档旨在帮助中文用户更好地了解和使用 Cursor 编辑器。</p></blockquote><hr><h2 id="欢迎使用-cursor" tabindex="-1">欢迎使用 Cursor <a class="header-anchor" href="#欢迎使用-cursor" aria-label="Permalink to &quot;欢迎使用 Cursor&quot;">​</a></h2><p><strong>Cursor 是一款集成 AI 功能的智能代码编辑器，提供智能代码开发的各种强大功能</strong></p><p>Cursor 是一个全新的智能 IDE，通过与 AI 的无缝集成提供强大功能。基于 VSCode 构建，Cursor 易于上手，同时能让您的工作效率得到显著提升。</p><h3 id="快速入门" tabindex="-1">快速入门 <a class="header-anchor" href="#快速入门" aria-label="Permalink to &quot;快速入门&quot;">​</a></h3><p>如果您是 Cursor 的新用户，可以通过以下指南快速开始：</p><ul><li><strong><a href="/ai/cursor/install.html">安装指南</a></strong> - 在几分钟内下载并安装适合您平台的 Cursor</li><li><strong><a href="/ai/cursor/migrate-vscode.html">从 VS Code 迁移</a></strong> - 从其他编辑器迁移？使用我们的迁移指南快速上手</li></ul><h3 id="编辑器核心功能" tabindex="-1">编辑器核心功能 <a class="header-anchor" href="#编辑器核心功能" aria-label="Permalink to &quot;编辑器核心功能&quot;">​</a></h3><p>Cursor 拥有多项核心功能，可以无缝融入您的工作流程。使用下面的链接了解 Cursor 的强大功能：</p><ul><li><strong><a href="/ai/cursor/tab.html">Tab 智能补全</a></strong> - 智能代码补全功能，能够从您的习惯中学习！支持多行编辑，自动修复错误，并预测您的下一步操作。</li><li><strong><a href="/ai/cursor/agent.html">Agent 智能代理</a></strong> - 您的 AI 结对编程助手，用于复杂代码修改。支持大规模编辑，精确的上下文控制和自动修复。</li><li><strong><a href="/ai/cursor/cmd-k.html">⌘K 内联编辑</a></strong> - 快速内联代码编辑和生成。完美支持在不打断工作流的情况下进行精确修改。</li><li><strong><a href="/ai/cursor/ask.html">Ask 智能问答</a></strong> - 了解您代码库的 AI 助手。获取答案并直接在编辑器中应用代码更改。</li></ul><h3 id="cursor-的起源" tabindex="-1">Cursor 的起源 <a class="header-anchor" href="#cursor-的起源" aria-label="Permalink to &quot;Cursor 的起源&quot;">​</a></h3><p>代码本质上是文本，我们编写代码的工具已经从简单的文本编辑器演变为越来越智能的开发环境。</p><p>最初，我们有语法高亮功能，使代码更易读。然后，我们有了自动完成功能，使编码更高效。</p><p>这些功能长期以来一直是标准配置，但使用 Cursor，我们正在重新发明您与代码交互的方式。</p><h3 id="cursor-如何工作" tabindex="-1">Cursor 如何工作？ <a class="header-anchor" href="#cursor-如何工作" aria-label="Permalink to &quot;Cursor 如何工作？&quot;">​</a></h3><p>Cursor 为用户提供了几个基本功能，这些功能只有在大型语言模型 (LLM) 的发展下才成为可能。</p><h3 id="如何开始使用" tabindex="-1">如何开始使用？ <a class="header-anchor" href="#如何开始使用" aria-label="Permalink to &quot;如何开始使用？&quot;">​</a></h3><p>您可以从 <a href="https://www.cursor.com" target="_blank" rel="noopener noreferrer">Cursor 官网</a> 下载适合您平台的 Cursor。由于基于 VS Code，入门非常简单，所有 AI 功能都是可选的。</p><p>您还可以一键导入所有 VS Code 扩展和设置。为了帮助您尝试 Cursor，我们提供 14 天的 Pro 计划免费试用，无需信用卡！</p><ul><li><strong><a href="/ai/cursor/install.html">安装入门</a></strong></li><li><strong>团队管理</strong> - 请参阅<a href="https://cursor.com" target="_blank" rel="noopener noreferrer">Cursor官网</a>获取团队管理相关信息</li></ul><hr><h2 id="cursor-使用实例" tabindex="-1">Cursor 使用实例 <a class="header-anchor" href="#cursor-使用实例" aria-label="Permalink to &quot;Cursor 使用实例&quot;">​</a></h2><h3 id="使用-tab-智能补全" tabindex="-1">使用 Tab 智能补全 <a class="header-anchor" href="#使用-tab-智能补全" aria-label="Permalink to &quot;使用 Tab 智能补全&quot;">​</a></h3><p><strong>示例场景</strong>: 编写 React 组件时自动补全多行代码</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始输入一个简单的 React 组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">onClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Cursor 可能会自动建议以下代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;primary-button&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{onClick}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {text}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>效果</strong>: 只需输入组件的开始部分，Cursor 就能理解您的意图并建议完整的实现。</p><h3 id="使用-agent-进行复杂重构" tabindex="-1">使用 Agent 进行复杂重构 <a class="header-anchor" href="#使用-agent-进行复杂重构" aria-label="Permalink to &quot;使用 Agent 进行复杂重构&quot;">​</a></h3><p><strong>示例场景</strong>: 将普通函数转换为异步函数</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">userId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchFromAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`/users/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 Agent 后，告诉它：&quot;将此函数转换为异步函数，使用 try-catch 处理错误&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>效果</strong>: Agent 会理解您的请求，自动将函数转换为：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">userId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchFromAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`/users/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Failed to fetch user data:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="使用-⌘k-内联编辑" tabindex="-1">使用 ⌘K 内联编辑 <a class="header-anchor" href="#使用-⌘k-内联编辑" aria-label="Permalink to &quot;使用 ⌘K 内联编辑&quot;">​</a></h3><p><strong>示例场景</strong>: 快速修改现有函数逻辑</p><ol><li>选中要修改的代码</li><li>按下 ⌘K (macOS) 或 Ctrl+K (Windows/Linux)</li><li>描述您的修改需求：&quot;添加缓存机制，避免重复请求同一用户数据&quot;</li></ol><p><strong>效果</strong>: Cursor 会直接在编辑器中显示修改后的代码建议。</p><h3 id="使用-ask-智能问答" tabindex="-1">使用 Ask 智能问答 <a class="header-anchor" href="#使用-ask-智能问答" aria-label="Permalink to &quot;使用 Ask 智能问答&quot;">​</a></h3><p><strong>示例场景</strong>: 理解复杂代码库</p><ol><li>选择一段复杂代码</li><li>按下 ⌘L (macOS) 或 Ctrl+L (Windows/Linux)</li><li>询问：&quot;这段代码的目的是什么？有没有潜在的性能问题？&quot;</li></ol><p><strong>效果</strong>: Cursor 会分析代码并提供详细的解释和改进建议。</p><hr><p>欢迎使用 Cursor！本文档和相关资源将帮助您快速掌握 Cursor 的各项功能，显著提升您的开发效率。如果您有任何问题或建议，请随时访问我们的<a href="https://forum.cursor.com" target="_blank" rel="noopener noreferrer">社区论坛</a>寻求帮助。</p>`,44)]))}const u=a(e,[["render",l]]);export{d as __pageData,u as default};
